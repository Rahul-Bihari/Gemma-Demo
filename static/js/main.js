document.addEventListener('DOMContentLoaded', function() {
    // Model selection handling
    const modelButtons = document.querySelectorAll('[data-model]');
    const currentModelSpan = document.getElementById('current-model');
    const loadingIndicator = document.getElementById('loading-indicator');
    const tokenWarning = document.getElementById('token-warning');

    modelButtons.forEach(button => {
        button.addEventListener('click', function() {
            const modelName = this.getAttribute('data-model');
            
            // Update active button
            modelButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Show loading indicator
            loadingIndicator.classList.remove('d-none');
            
            // Call API to load the model
            fetch('/api/load_model', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    model_name: modelName
                }),
            })
            .then(response => response.json())
            .then(data => {
                // Update current model display
                currentModelSpan.textContent = modelName;
                // Hide loading indicator
                loadingIndicator.classList.add('d-none');
                
                // Show alert based on status
                if (data.status === 'success') {
                    showAlert('success', `Model ${modelName} loaded successfully!`);
                    
                    // Hide token warning if using real model
                    if (data.message.includes("actual model")) {
                        tokenWarning.classList.add('d-none');
                    }
                } else if (data.status === 'warning') {
                    showAlert('warning', data.message);
                    tokenWarning.classList.remove('d-none');
                } else {
                    showAlert('danger', `Error loading model: ${data.message}`);
                    tokenWarning.classList.remove('d-none');
                }
            })
            .catch(error => {
                console.error('Error loading model:', error);
                loadingIndicator.classList.add('d-none');
                showAlert('danger', 'Error loading model. Please try again.');
            });
        });
    });

    // Helper function to add source info to output containers
    function addResponseSourceInfo(container, data) {
        // Remove any existing source info
        const existingSourceInfo = container.querySelector('.source-info');
        if (existingSourceInfo) {
            existingSourceInfo.remove();
        }
        
        // Create new source info element
        const sourceInfo = document.createElement('div');
        sourceInfo.className = 'source-info mt-3';
        
        if (data.source === 'actual_model') {
            sourceInfo.innerHTML = 
                '<div class="alert alert-success">' +
                '<strong><i class="bi bi-check-circle-fill me-2"></i>Using actual Gemma model</strong>' +
                '<p class="mb-0 small">This response was generated by the actual Gemma model on Hugging Face.</p>' +
                '</div>';
        } else {
            sourceInfo.innerHTML = 
                '<div class="alert alert-warning">' +
                '<strong><i class="bi bi-exclamation-triangle-fill me-2"></i>Using simulated response</strong>' +
                '<p class="mb-0 small">This is a pre-written example. To get actual model responses, provide a ' +
                'Hugging Face token with access to the Gemma model.</p>' +
                '</div>';
        }
        
        container.appendChild(sourceInfo);
    }

    // Text Generation form handling
    const textGenerationForm = document.getElementById('text-generation-form');
    textGenerationForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const prompt = document.getElementById('text-prompt').value;
        const maxLength = document.getElementById('text-max-length').value;
        const temperature = document.getElementById('text-temperature').value;
        const topP = document.getElementById('text-top-p').value;
        const topK = document.getElementById('text-top-k').value;
        const repetitionPenalty = document.getElementById('text-repetition-penalty').value;
        
        const generateBtn = document.getElementById('generate-text-btn');
        showLoading(generateBtn);
        
        fetch('/api/generate_text', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                prompt: prompt,
                max_length: maxLength,
                temperature: temperature,
                top_p: topP,
                top_k: topK,
                repetition_penalty: repetitionPenalty
            }),
        })
        .then(response => response.json())
        .then(data => {
            hideLoading(generateBtn);
            
            if (data.status === 'success') {
                const outputContainer = document.getElementById('text-generation-output');
                const outputContent = document.getElementById('generated-text');
                
                outputContent.textContent = data.generated_text;
                outputContainer.classList.remove('d-none');
                
                // Add source information
                addResponseSourceInfo(outputContainer, data);
                
                // Scroll to output
                outputContainer.scrollIntoView({ behavior: 'smooth' });
            } else {
                // Show error
                const errorElement = document.getElementById('text-generation-error');
                errorElement.textContent = data.errors ? data.errors.join(', ') : 'An error occurred';
                errorElement.classList.remove('d-none');
            }
        })
        .catch(error => {
            console.error('Error generating text:', error);
            hideLoading(generateBtn);
            showAlert('danger', 'Error generating text. Please try again.');
        });
    });

    // Question Answering form handling
    const qaForm = document.getElementById('qa-form');
    qaForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const question = document.getElementById('question-input').value;
        const maxLength = document.getElementById('qa-max-length').value;
        const temperature = document.getElementById('qa-temperature').value;
        
        const answerBtn = document.getElementById('answer-question-btn');
        showLoading(answerBtn);
        
        fetch('/api/answer_question', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                question: question,
                max_length: maxLength,
                temperature: temperature
            }),
        })
        .then(response => response.json())
        .then(data => {
            hideLoading(answerBtn);
            
            if (data.status === 'success') {
                const outputContainer = document.getElementById('qa-output');
                const outputContent = document.getElementById('qa-answer');
                
                outputContent.textContent = data.answer;
                outputContainer.classList.remove('d-none');
                
                // Add source information
                addResponseSourceInfo(outputContainer, data);
                
                // Scroll to output
                outputContainer.scrollIntoView({ behavior: 'smooth' });
            } else {
                // Show error
                const errorElement = document.getElementById('qa-error');
                errorElement.textContent = data.errors ? data.errors.join(', ') : 'An error occurred';
                errorElement.classList.remove('d-none');
            }
        })
        .catch(error => {
            console.error('Error answering question:', error);
            hideLoading(answerBtn);
            showAlert('danger', 'Error answering question. Please try again.');
        });
    });

    // Code Generation form handling
    const codeForm = document.getElementById('code-form');
    codeForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const prompt = document.getElementById('code-prompt').value;
        const maxLength = document.getElementById('code-max-length').value;
        const temperature = document.getElementById('code-temperature').value;
        
        const generateBtn = document.getElementById('generate-code-btn');
        showLoading(generateBtn);
        
        fetch('/api/generate_code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                prompt: prompt,
                max_length: maxLength,
                temperature: temperature
            }),
        })
        .then(response => response.json())
        .then(data => {
            hideLoading(generateBtn);
            
            if (data.status === 'success') {
                const outputContainer = document.getElementById('code-output');
                const outputContent = document.getElementById('generated-code');
                
                outputContent.innerHTML = data.code;
                outputContainer.classList.remove('d-none');
                
                // Add source information
                addResponseSourceInfo(outputContainer, data);
                
                // Scroll to output
                outputContainer.scrollIntoView({ behavior: 'smooth' });
            } else {
                // Show error
                const errorElement = document.getElementById('code-error');
                errorElement.textContent = data.errors ? data.errors.join(', ') : 'An error occurred';
                errorElement.classList.remove('d-none');
            }
        })
        .catch(error => {
            console.error('Error generating code:', error);
            hideLoading(generateBtn);
            showAlert('danger', 'Error generating code. Please try again.');
        });
    });

    // Creative Writing form handling
    const creativeForm = document.getElementById('creative-form');
    creativeForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const prompt = document.getElementById('creative-prompt').value;
        const maxLength = document.getElementById('creative-max-length').value;
        const temperature = document.getElementById('creative-temperature').value;
        
        const generateBtn = document.getElementById('generate-creative-btn');
        showLoading(generateBtn);
        
        fetch('/api/creative_writing', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                prompt: prompt,
                max_length: maxLength,
                temperature: temperature
            }),
        })
        .then(response => response.json())
        .then(data => {
            hideLoading(generateBtn);
            
            if (data.status === 'success') {
                const outputContainer = document.getElementById('creative-output');
                const outputContent = document.getElementById('creative-text');
                
                outputContent.textContent = data.text;
                outputContainer.classList.remove('d-none');
                
                // Add source information
                addResponseSourceInfo(outputContainer, data);
                
                // Scroll to output
                outputContainer.scrollIntoView({ behavior: 'smooth' });
            } else {
                // Show error
                const errorElement = document.getElementById('creative-error');
                errorElement.textContent = data.errors ? data.errors.join(', ') : 'An error occurred';
                errorElement.classList.remove('d-none');
            }
        })
        .catch(error => {
            console.error('Error generating creative writing:', error);
            hideLoading(generateBtn);
            showAlert('danger', 'Error generating creative content. Please try again.');
        });
    });

    // Example handling
    const exampleItems = document.querySelectorAll('.example-item');
    exampleItems.forEach(item => {
        item.addEventListener('click', function() {
            const prompt = this.getAttribute('data-prompt');
            document.getElementById('text-prompt').value = prompt;
        });
    });

    const exampleQuestions = document.querySelectorAll('.example-question');
    exampleQuestions.forEach(item => {
        item.addEventListener('click', function() {
            const question = this.getAttribute('data-question');
            document.getElementById('question-input').value = question;
        });
    });

    const exampleCodes = document.querySelectorAll('.example-code');
    exampleCodes.forEach(item => {
        item.addEventListener('click', function() {
            const prompt = this.getAttribute('data-prompt');
            document.getElementById('code-prompt').value = prompt;
        });
    });

    const exampleCreatives = document.querySelectorAll('.example-creative');
    exampleCreatives.forEach(item => {
        item.addEventListener('click', function() {
            const prompt = this.getAttribute('data-prompt');
            document.getElementById('creative-prompt').value = prompt;
        });
    });

    // Copy button functionality
    const copyButtons = document.querySelectorAll('.copy-btn');
    copyButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetId = this.getAttribute('data-target');
            const textToCopy = document.getElementById(targetId).textContent;
            
            navigator.clipboard.writeText(textToCopy).then(() => {
                // Change button text temporarily
                const originalText = this.textContent;
                this.textContent = 'Copied!';
                setTimeout(() => {
                    this.textContent = originalText;
                }, 2000);
            }).catch(err => {
                console.error('Error copying text:', err);
            });
        });
    });

    // Utility functions
    function showLoading(button) {
        button.disabled = true;
        button.classList.add('loading-btn');
        const originalText = button.textContent;
        button.setAttribute('data-original-text', originalText);
        button.innerHTML = '<span style="visibility: hidden;">' + originalText + '</span>';
    }

    function hideLoading(button) {
        button.disabled = false;
        button.classList.remove('loading-btn');
        const originalText = button.getAttribute('data-original-text');
        button.textContent = originalText;
    }

    function showAlert(type, message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
        alertDiv.style.zIndex = 1050;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        document.body.appendChild(alertDiv);
        
        setTimeout(() => {
            alertDiv.classList.remove('show');
            setTimeout(() => {
                alertDiv.remove();
            }, 150);
        }, 5000);
    }
});